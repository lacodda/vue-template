// Functions
//
// Utility mixins and functions for evalutating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Another grid mixin that ensures the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  // to string
  $string: inspect($string);
  
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

// Разбивка строки по разделителю
@function explode($string, $dem) {
  // to string
  $string: inspect($string);
  
  $list: ();
  $sum: str-length($string);
  
  @for $i from 1 through $sum {
    $str: str-index($string, $dem);
    
    @if str-length($string) >= 1 and $str == null {
      $list: append($list, $string);
      $string: '';
    }
    
    @if type-of($str) == number {
      $each: str-slice($string, 0, ($str - 1));
      $list: append($list, $each);
      $string: str-slice($string, ($str + 1), $sum);
    }
  }
  
  @return $list;
}

// Расчет параметров масштабирования
@function calc-scale($string, $factor) {
  $list: ();
  
  @each $value in explode($string, ' ') {
    @if $value == 'auto' or $value == '0' {
      $list: append($list, $value);
    } @else {
      $list: append($list, calc(#{$value} * #{$factor}));
    }
  }
  
  @return $list;
}

// Color contrast
@function color-yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);
  
  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
  
  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $yiq-text-dark;
  } @else {
    @return $yiq-text-light;
  }
}

@function theme-color($theme: "default") {
  @return map-get($theme-colors, $theme);
}

@function element-color($theme: "default", $key: "background-color") {
  @return map-get(theme-color($theme), $key);
}

// Request a theme color level
@function theme-color-level($theme: "default", $element: "background-color", $level: 0) {
  $color: element-color($theme, $element);
  $color-base: if($level > 0, $black, $white);
  $level: abs($level);
  
  @return mix($color-base, $color, $level * $theme-color-interval);
}

// Strip units from values
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Calculate rems from pixels
@function calc-rem($px, $base: 10) {
  $px: strip-unit($px);
  $base: strip-unit($base);
  @if $px == 1 {
    @return 1px;
  }
  @return ($px / $base) * 1rem;
}

// Вычисление квадратного корня
@function sqrt($r) {
  $x0: 1;
  $x1: $x0;
  
  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }
  
  @return $x1;
}

@function unicode($str) {
  @return unquote("\"") + $str + unquote("\"");
}
